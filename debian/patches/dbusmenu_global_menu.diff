Description: add native support for D-Bus global menu
 The protocol was originally developed by Canonical, currently supported
 by Unity and Plasma.
Origin: https://code.qt.io/cgit/qt/qtbase.git/commit/?id=b6a824d0a3b4fabd
Last-Update: 2016-08-18

--- a/src/platformsupport/dbusmenu/dbusmenu.pri
+++ b/src/platformsupport/dbusmenu/dbusmenu.pri
@@ -6,10 +6,14 @@
     $$PWD/qdbusmenuadaptor_p.h \
     $$PWD/qdbusmenutypes_p.h \
     $$PWD/qdbusmenuconnection_p.h \
+    $$PWD/qdbusmenubar_p.h \
+    $$PWD/qdbusmenuregistrarproxy_p.h \
     $$PWD/qdbusplatformmenu_p.h \
 
 SOURCES += \
     $$PWD/qdbusmenuadaptor.cpp \
     $$PWD/qdbusmenutypes.cpp \
     $$PWD/qdbusmenuconnection.cpp \
+    $$PWD/qdbusmenubar.cpp \
+    $$PWD/qdbusmenuregistrarproxy.cpp \
     $$PWD/qdbusplatformmenu.cpp \
--- /dev/null
+++ b/src/platformsupport/dbusmenu/qdbusmenubar.cpp
@@ -0,0 +1,177 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 Dmitry Shachnev <mitya57@gmail.com>
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qdbusmenubar_p.h"
+#include "qdbusmenuregistrarproxy_p.h"
+
+QT_BEGIN_NAMESPACE
+
+/* note: do not change these to QStringLiteral;
+   we are unloaded before QtDBus is done using the strings.
+ */
+#define REGISTRAR_SERVICE QLatin1String("com.canonical.AppMenu.Registrar")
+#define REGISTRAR_PATH QLatin1String("/com/canonical/AppMenu/Registrar")
+
+QDBusMenuBar::QDBusMenuBar()
+    : QPlatformMenuBar()
+    , m_menu(new QDBusPlatformMenu())
+    , m_menuAdaptor(new QDBusMenuAdaptor(m_menu))
+    , m_windowId(0)
+{
+    QDBusMenuItem::registerDBusTypes();
+    connect(m_menu, &QDBusPlatformMenu::propertiesUpdated,
+            m_menuAdaptor, &QDBusMenuAdaptor::ItemsPropertiesUpdated);
+    connect(m_menu, &QDBusPlatformMenu::updated,
+            m_menuAdaptor, &QDBusMenuAdaptor::LayoutUpdated);
+}
+
+QDBusMenuBar::~QDBusMenuBar()
+{
+    unregisterMenuBar();
+    delete m_menuAdaptor;
+    delete m_menu;
+    qDeleteAll(m_menuItems);
+}
+
+QDBusPlatformMenuItem *QDBusMenuBar::menuItemForMenu(QPlatformMenu *menu)
+{
+    if (!menu)
+        return nullptr;
+    quintptr tag = menu->tag();
+    const auto it = m_menuItems.constFind(tag);
+    if (it != m_menuItems.cend()) {
+        return *it;
+    } else {
+        QDBusPlatformMenuItem *item = new QDBusPlatformMenuItem;
+        updateMenuItem(item, menu);
+        m_menuItems.insert(tag, item);
+        return item;
+    }
+}
+
+void QDBusMenuBar::updateMenuItem(QDBusPlatformMenuItem *item, QPlatformMenu *menu)
+{
+    const QDBusPlatformMenu *ourMenu = qobject_cast<const QDBusPlatformMenu *>(menu);
+    item->setText(ourMenu->text());
+    item->setIcon(ourMenu->icon());
+    item->setEnabled(ourMenu->isEnabled());
+    item->setVisible(ourMenu->isVisible());
+    item->setMenu(menu);
+}
+
+void QDBusMenuBar::insertMenu(QPlatformMenu *menu, QPlatformMenu *before)
+{
+    QDBusPlatformMenuItem *menuItem = menuItemForMenu(menu);
+    QDBusPlatformMenuItem *beforeItem = menuItemForMenu(before);
+    m_menu->insertMenuItem(menuItem, beforeItem);
+    m_menu->emitUpdated();
+}
+
+void QDBusMenuBar::removeMenu(QPlatformMenu *menu)
+{
+    QDBusPlatformMenuItem *menuItem = menuItemForMenu(menu);
+    m_menu->removeMenuItem(menuItem);
+    m_menu->emitUpdated();
+}
+
+void QDBusMenuBar::syncMenu(QPlatformMenu *menu)
+{
+    QDBusPlatformMenuItem *menuItem = menuItemForMenu(menu);
+    updateMenuItem(menuItem, menu);
+}
+
+void QDBusMenuBar::handleReparent(QWindow *newParentWindow)
+{
+    if (newParentWindow && newParentWindow->winId() != m_windowId) {
+        unregisterMenuBar();
+        m_windowId = newParentWindow->winId();
+        registerMenuBar();
+    }
+}
+
+QPlatformMenu *QDBusMenuBar::menuForTag(quintptr tag) const
+{
+    QDBusPlatformMenuItem *menuItem = m_menuItems.value(tag);
+    if (menuItem)
+        return const_cast<QPlatformMenu *>(menuItem->menu());
+    return nullptr;
+}
+
+QPlatformMenu *QDBusMenuBar::createMenu() const
+{
+    return new QDBusPlatformMenu;
+}
+
+void QDBusMenuBar::registerMenuBar()
+{
+    static uint menuBarId = 0;
+
+    QDBusConnection connection = QDBusConnection::sessionBus();
+    m_objectPath = QStringLiteral("/MenuBar/%1").arg(++menuBarId);
+    if (!connection.registerObject(m_objectPath, m_menu))
+        return;
+
+    QDBusMenuRegistrarInterface registrar(REGISTRAR_SERVICE, REGISTRAR_PATH, connection, this);
+    QDBusPendingReply<> r = registrar.RegisterWindow(m_windowId, QDBusObjectPath(m_objectPath));
+    r.waitForFinished();
+    if (r.isError()) {
+        qWarning("Failed to register window menu, reason: %s (\"%s\")",
+                 qUtf8Printable(r.error().name()), qUtf8Printable(r.error().message()));
+        connection.unregisterObject(m_objectPath);
+    }
+}
+
+void QDBusMenuBar::unregisterMenuBar()
+{
+    QDBusConnection connection = QDBusConnection::sessionBus();
+
+    if (m_windowId) {
+        QDBusMenuRegistrarInterface registrar(REGISTRAR_SERVICE, REGISTRAR_PATH, connection, this);
+        QDBusPendingReply<> r = registrar.UnregisterWindow(m_windowId);
+        r.waitForFinished();
+        if (r.isError())
+            qWarning("Failed to unregister window menu, reason: %s (\"%s\")",
+                     qUtf8Printable(r.error().name()), qUtf8Printable(r.error().message()));
+    }
+
+    if (!m_objectPath.isEmpty())
+        connection.unregisterObject(m_objectPath);
+}
+
+QT_END_NAMESPACE
--- /dev/null
+++ b/src/platformsupport/dbusmenu/qdbusmenubar_p.h
@@ -0,0 +1,92 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 Dmitry Shachnev <mitya57@gmail.com>
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QDBUSMENUBAR_P_H
+#define QDBUSMENUBAR_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <private/qdbusplatformmenu_p.h>
+#include <private/qdbusmenuadaptor_p.h>
+#include <QtCore/QHash>
+#include <QtCore/QString>
+#include <QtGui/QWindow>
+
+QT_BEGIN_NAMESPACE
+
+class QDBusMenuBar : public QPlatformMenuBar
+{
+    Q_OBJECT
+
+public:
+    QDBusMenuBar();
+    virtual ~QDBusMenuBar();
+
+    void insertMenu(QPlatformMenu *menu, QPlatformMenu *before) Q_DECL_OVERRIDE;
+    void removeMenu(QPlatformMenu *menu) Q_DECL_OVERRIDE;
+    void syncMenu(QPlatformMenu *menu) Q_DECL_OVERRIDE;
+    void handleReparent(QWindow *newParentWindow) Q_DECL_OVERRIDE;
+    QPlatformMenu *menuForTag(quintptr tag) const Q_DECL_OVERRIDE;
+    QPlatformMenu *createMenu() const Q_DECL_OVERRIDE;
+
+private:
+    QDBusPlatformMenu *m_menu;
+    QDBusMenuAdaptor *m_menuAdaptor;
+    QHash<quintptr, QDBusPlatformMenuItem *> m_menuItems;
+    uint m_windowId;
+    QString m_objectPath;
+
+    QDBusPlatformMenuItem *menuItemForMenu(QPlatformMenu *menu);
+    static void updateMenuItem(QDBusPlatformMenuItem *item, QPlatformMenu *menu);
+    void registerMenuBar();
+    void unregisterMenuBar();
+};
+
+QT_END_NAMESPACE
+
+#endif // QDBUSMENUBAR_P_H
--- /dev/null
+++ b/src/platformsupport/dbusmenu/qdbusmenuregistrarproxy.cpp
@@ -0,0 +1,64 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 Dmitry Shachnev <mitya57@gmail.com>
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*
+ * This file was originally created by qdbusxml2cpp version 0.8
+ * Command line was: qdbusxml2cpp -p qdbusmenuregistrarproxy ../../3rdparty/dbus-ifaces/com.canonical.AppMenu.Registrar.xml
+ *
+ * However it is maintained manually.
+ */
+
+#include "qdbusmenuregistrarproxy_p.h"
+
+QT_BEGIN_NAMESPACE
+
+/*
+ * Implementation of interface class QDBusMenuRegistrarInterface
+ */
+
+QDBusMenuRegistrarInterface::QDBusMenuRegistrarInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
+    : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)
+{
+}
+
+QDBusMenuRegistrarInterface::~QDBusMenuRegistrarInterface()
+{
+}
+
+QT_END_NAMESPACE
--- /dev/null
+++ b/src/platformsupport/dbusmenu/qdbusmenuregistrarproxy_p.h
@@ -0,0 +1,127 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 Dmitry Shachnev <mitya57@gmail.com>
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*
+ * This file was originally created by qdbusxml2cpp version 0.8
+ * Command line was: qdbusxml2cpp -p qdbusmenuregistrarproxy ../../3rdparty/dbus-ifaces/com.canonical.AppMenu.Registrar.xml
+ *
+ * However it is maintained manually.
+ */
+
+#ifndef QDBUSMENUREGISTRARPROXY_P_H
+#define QDBUSMENUREGISTRARPROXY_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <QtCore/QObject>
+#include <QtCore/QByteArray>
+#include <QtCore/QList>
+#include <QtCore/QString>
+#include <QtCore/QVariant>
+#include <QtDBus/QDBusAbstractInterface>
+#include <QtDBus/QDBusConnection>
+#include <QtDBus/QDBusReply>
+
+QT_BEGIN_NAMESPACE
+
+/*
+ * Proxy class for interface com.canonical.AppMenu.Registrar
+ */
+class QDBusMenuRegistrarInterface : public QDBusAbstractInterface
+{
+    Q_OBJECT
+public:
+    static inline const char *staticInterfaceName()
+    {
+        return "com.canonical.AppMenu.Registrar";
+    }
+
+public:
+    explicit QDBusMenuRegistrarInterface(const QString &service,
+                                         const QString &path,
+                                         const QDBusConnection &connection,
+                                         QObject *parent = nullptr);
+
+    ~QDBusMenuRegistrarInterface();
+
+public Q_SLOTS: // METHODS
+    QDBusPendingReply<QString, QDBusObjectPath> GetMenuForWindow(uint windowId)
+    {
+        QList<QVariant> argumentList;
+        argumentList << QVariant::fromValue(windowId);
+        return asyncCallWithArgumentList(QStringLiteral("GetMenuForWindow"), argumentList);
+    }
+    QDBusReply<QString> GetMenuForWindow(uint windowId, QDBusObjectPath &menuObjectPath)
+    {
+        QList<QVariant> argumentList;
+        argumentList << QVariant::fromValue(windowId);
+        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetMenuForWindow"), argumentList);
+        QList<QVariant> arguments = reply.arguments();
+        if (reply.type() == QDBusMessage::ReplyMessage && arguments.count() == 2)
+            menuObjectPath = qdbus_cast<QDBusObjectPath>(arguments.at(1));
+        return reply;
+    }
+
+    QDBusPendingReply<> RegisterWindow(uint windowId, const QDBusObjectPath &menuObjectPath)
+    {
+        QList<QVariant> argumentList;
+        argumentList << QVariant::fromValue(windowId) << QVariant::fromValue(menuObjectPath);
+        return asyncCallWithArgumentList(QStringLiteral("RegisterWindow"), argumentList);
+    }
+
+    QDBusPendingReply<> UnregisterWindow(uint windowId)
+    {
+        QList<QVariant> argumentList;
+        argumentList << QVariant::fromValue(windowId);
+        return asyncCallWithArgumentList(QStringLiteral("UnregisterWindow"), argumentList);
+    }
+};
+
+QT_END_NAMESPACE
+
+#endif // QDBUSMENUREGISTRARPROXY_P_H
--- a/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
+++ b/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
@@ -53,9 +53,12 @@
 #include <qpa/qplatformintegration.h>
 #include <qpa/qplatformservices.h>
 #include <qpa/qplatformdialoghelper.h>
+#ifndef QT_NO_DBUS
+#include "QtPlatformSupport/private/qdbusplatformmenu_p.h"
+#include "QtPlatformSupport/private/qdbusmenubar_p.h"
+#endif
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
 #include "QtPlatformSupport/private/qdbustrayicon_p.h"
-#include "QtPlatformSupport/private/qdbusplatformmenu_p.h"
 #endif
 
 #include <algorithm>
@@ -108,6 +111,21 @@
 }
 #endif
 
+#ifndef QT_NO_DBUS
+static bool checkDBusGlobalMenuAvailable()
+{
+    QDBusConnection connection = QDBusConnection::sessionBus();
+    QString registrarService = QStringLiteral("com.canonical.AppMenu.Registrar");
+    return connection.interface()->isServiceRegistered(registrarService);
+}
+
+static bool isDBusGlobalMenuAvailable()
+{
+    static bool dbusGlobalMenuAvailable = checkDBusGlobalMenuAvailable();
+    return dbusGlobalMenuAvailable;
+}
+#endif
+
 class QGenericUnixThemePrivate : public QPlatformThemePrivate
 {
 public:
@@ -166,6 +184,15 @@
     return paths;
 }
 
+#ifndef QT_NO_DBUS
+QPlatformMenuBar *QGenericUnixTheme::createPlatformMenuBar() const
+{
+    if (isDBusGlobalMenuAvailable())
+        return new QDBusMenuBar();
+    return nullptr;
+}
+#endif
+
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
 QPlatformSystemTrayIcon *QGenericUnixTheme::createPlatformSystemTrayIcon() const
 {
@@ -553,6 +580,15 @@
     return new QKdeTheme(kdeDirs, kdeVersion);
 }
 
+#ifndef QT_NO_DBUS
+QPlatformMenuBar *QKdeTheme::createPlatformMenuBar() const
+{
+    if (isDBusGlobalMenuAvailable())
+        return new QDBusMenuBar();
+    return nullptr;
+}
+#endif
+
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
 QPlatformSystemTrayIcon *QKdeTheme::createPlatformSystemTrayIcon() const
 {
@@ -649,6 +685,15 @@
     return QStringLiteral("%1 %2").arg(QLatin1String(defaultSystemFontNameC)).arg(defaultSystemFontSize);
 }
 
+#ifndef QT_NO_DBUS
+QPlatformMenuBar *QGnomeTheme::createPlatformMenuBar() const
+{
+    if (isDBusGlobalMenuAvailable())
+        return new QDBusMenuBar();
+    return nullptr;
+}
+#endif
+
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
 QPlatformSystemTrayIcon *QGnomeTheme::createPlatformSystemTrayIcon() const
 {
--- a/src/platformsupport/themes/genericunix/qgenericunixthemes_p.h
+++ b/src/platformsupport/themes/genericunix/qgenericunixthemes_p.h
@@ -79,6 +79,9 @@
     QVariant themeHint(ThemeHint hint) const Q_DECL_OVERRIDE;
 
     static QStringList xdgIconThemePaths();
+#ifndef QT_NO_DBUS
+    QPlatformMenuBar *createPlatformMenuBar() const Q_DECL_OVERRIDE;
+#endif
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 #endif
@@ -101,6 +104,9 @@
     const QPalette *palette(Palette type = SystemPalette) const Q_DECL_OVERRIDE;
 
     const QFont *font(Font type) const Q_DECL_OVERRIDE;
+#ifndef QT_NO_DBUS
+    QPlatformMenuBar *createPlatformMenuBar() const Q_DECL_OVERRIDE;
+#endif
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 #endif
@@ -121,6 +127,9 @@
     QString standardButtonText(int button) const Q_DECL_OVERRIDE;
 
     virtual QString gtkFontName() const;
+#ifndef QT_NO_DBUS
+    QPlatformMenuBar *createPlatformMenuBar() const Q_DECL_OVERRIDE;
+#endif
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 #endif
--- /dev/null
+++ b/include/QtPlatformSupport/5.6.2/QtPlatformSupport/private/qdbusmenubar_p.h
@@ -0,0 +1 @@
+#include "../../../../../src/platformsupport/dbusmenu/qdbusmenubar_p.h"
